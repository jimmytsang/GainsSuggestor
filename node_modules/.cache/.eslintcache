[{"/Users/jtsang01/Desktop/GainsSuggestor/src/index.js":"1","/Users/jtsang01/Desktop/GainsSuggestor/src/App.js":"2","/Users/jtsang01/Desktop/GainsSuggestor/src/reportWebVitals.js":"3"},{"size":535,"mtime":1700091221048,"results":"4","hashOfConfig":"5"},{"size":9144,"mtime":1701307657019,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1700091221049,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zrwr9r",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jtsang01/Desktop/GainsSuggestor/src/index.js",[],[],"/Users/jtsang01/Desktop/GainsSuggestor/src/App.js",["18","19","20","21","22"],[],"import React, { useState } from 'react';\nimport { Container, Form, Button, Row, Col, ButtonGroup, Table } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// ... (previous imports)\n\nfunction App() {\n  const [age, setAge] = useState('');\n  const [bodyFat, setBodyFat] = useState('');\n  const [height, setHeight] = useState('');\n  const [weight, setWeight] = useState('');\n  const [gender, setGender] = useState('male');\n  const [goal, setGoal] = useState('maintenance');\n  const [activityLevel, setActivityLevel] = useState('sedentary');\n  const [leanBodyMass, setLeanBodyMass] = useState('');\n  const [dailyCalories, setDailyCalories] = useState('');\n  const [proteinRatio, setProteinRatio] = useState(30);\n  const [carbRatio, setCarbRatio] = useState(40);\n  const [fatRatio, setFatRatio] = useState(30);\n  const [proteinAmount, setProteinAmount] = useState('');\n  const [carbAmount, setCarbAmount] = useState('');\n  const [fatAmount, setFatAmount] = useState('');\n  const [unitSystem, setUnitSystem] = useState('metric'); // 'metric' or 'imperial'\n\n  let initalMealState = { name: '', protein: '', carbs: '', fat: '' };\n  let initialMealPlan = {\n    monday: { breakfast: '', lunch: '', dinner: '' },\n    tuesday: { breakfast: '', lunch: '', dinner: '' },\n    wednesday: { breakfast: '', lunch: '', dinner: '' },\n    thursday: { breakfast: '', lunch: '', dinner: '' },\n    friday: { breakfast: '', lunch: '', dinner: '' },\n    saturday: { breakfast: '', lunch: '', dinner: '' },\n    sunday: { breakfast: '', lunch: '', dinner: '' },\n  };\n\n  Object.keys(initialMealPlan).forEach((day) => {\n    Object.keys(initialMealPlan[day]).forEach((meal) => {\n      initialMealPlan[day][meal] = initalMealState;\n    });\n  });\n  const [mealPlan, setMealPlan] = useState(initialMealPlan);\n\n  const generateMealPlan = () => {\n    if (leanBodyMass && dailyCalories) {\n      const daysOfWeek = Object.keys(mealPlan);\n\n      const placeholderMeals = {\n        breakfast: { name: 'Omelette', protein: 30, carbs: 10, fat: 15 },\n        lunch: { name: 'Chicken Salad', protein: 40, carbs: 20, fat: 10 },\n        dinner: { name: 'Grilled Salmon', protein: 25, carbs: 5, fat: 12 },\n      };\n\n      const updatedMealPlan = {};\n\n      daysOfWeek.forEach((day) => {\n        updatedMealPlan[day] = { ...placeholderMeals };\n      });\n\n      setMealPlan(updatedMealPlan);\n    }\n  };\n\n  const shouldDisplayMetric = () => {\n    return unitSystem === 'metric';\n  }\n\n  const calculateTDEE = () => {\n    if (age && height && weight && gender && goal && activityLevel) {\n      let bmr;\n\n      // Convert height and weight to metric units if imperial is selected\n      const heightInCm = unitSystem === 'metric' ? height : height * 2.54;\n      const weightInKg = unitSystem === 'metric' ? weight : weight * 0.453592;\n\n      // Calculate BMR based on Mifflin-St Jeor Equation\n      if (gender === 'male') {\n        bmr = 10 * weightInKg + 6.25 * heightInCm - 5 * age + 5;\n      } else {\n        bmr = 10 * weightInKg + 6.25 * heightInCm - 5 * age - 161;\n      }\n\n      // Apply activity level multiplier to get TDEE\n      let tdee;\n      switch (activityLevel) {\n        case 'sedentary':\n          tdee = bmr * 1.2;\n          break;\n        case 'lightlyActive':\n          tdee = bmr * 1.375;\n          break;\n        case 'moderatelyActive':\n          tdee = bmr * 1.55;\n          break;\n        case 'veryActive':\n          tdee = bmr * 1.725;\n          break;\n        case 'extraActive':\n          tdee = bmr * 1.9;\n          break;\n        default:\n          tdee = bmr;\n      }\n\n      const fatMass = (bodyFat / 100) * weight;\n      const leanMass = weight - fatMass;\n      const lbm = leanMass.toFixed(2);\n      const dCalories = tdee.toFixed(2);\n      const protein = dCalories * (proteinRatio / 100) / 4;\n      const carbs = dCalories * (carbRatio / 100) / 4;\n      const fat = dCalories * (fatRatio / 100) / 9;\n      setLeanBodyMass(leanMass.toFixed(2));\n      setDailyCalories(dCalories);\n      setProteinAmount((protein).toFixed(2)); // Assuming 1g of protein = 4 calories\n      setCarbAmount((carbs).toFixed(2)); // Assuming 1g of carbs = 4 calories\n      setFatAmount((fat).toFixed(2)); // Assuming 1g of fat = 9 calories\n      generateMealPlan();\n    }\n  };\n\n\n  let heightLabel = shouldDisplayMetric ? 'in cm' : 'in inches';\n  let weightLabel = shouldDisplayMetric ? 'in kg' : 'in lb';\n\n  return (\n    <Container className=\"mt-5\">\n      <ButtonGroup className=\"mb-3\">\n        <Button\n          variant={unitSystem === 'metric' ? 'primary' : 'secondary'}\n          onClick={() => setUnitSystem('metric')}\n        >\n          Metric\n        </Button>\n        <Button\n          variant={unitSystem === 'imperial' ? 'primary' : 'secondary'}\n          onClick={() => setUnitSystem('imperial')}\n        >\n          Imperial\n        </Button>\n      </ButtonGroup>\n      <h1 className=\"mb-4\">Macro Nutrition Calculator</h1>\n      <Form>\n        <Row className=\"mb-3\">\n          <Col>\n            <Form.Label>Age</Form.Label>\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Enter your age\"\n              value={age}\n              onChange={(e) => setAge(e.target.value)}\n            />\n          </Col>\n          <Col>\n            <Form.Label>Height ({heightLabel})</Form.Label>\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Enter your height\"\n              value={height}\n              onChange={(e) => setHeight(e.target.value)}\n            />\n          </Col>\n          <Col>\n            <Form.Label>Weight ({weightLabel})</Form.Label>\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Enter your weight\"\n              value={weight}\n              onChange={(e) => setWeight(e.target.value)}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mb-3\">\n          <Col>\n            <Form.Label>Gender</Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={gender}\n              onChange={(e) => setGender(e.target.value)}\n            >\n              <option value=\"male\">Male</option>\n              <option value=\"female\">Female</option>\n            </Form.Control>\n          </Col>\n          <Col>\n            <Form.Label>Goal</Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={goal}\n              onChange={(e) => setGoal(e.target.value)}\n            >\n              <option value=\"maintenance\">Maintenance</option>\n              <option value=\"bulking\">Bulking</option>\n              <option value=\"cutting\">Cutting</option>\n            </Form.Control>\n          </Col>\n          <Col>\n            <Form.Label>Activity Level</Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={activityLevel}\n              onChange={(e) => setActivityLevel(e.target.value)}\n            >\n              <option value=\"sedentary\">Sedentary</option>\n              <option value=\"lightlyActive\">Lightly Active</option>\n              <option value=\"moderatelyActive\">Moderately Active</option>\n              <option value=\"veryActive\">Very Active</option>\n              <option value=\"extraActive\">Extra Active</option>\n            </Form.Control>\n          </Col>\n        </Row>\n        <Button variant=\"primary\" onClick={calculateTDEE}>\n          Calculate TDEE & Macronutrients\n        </Button>\n      </Form>\n      {dailyCalories && proteinAmount && carbAmount && fatAmount && (\n        <div className=\"mt-4\">\n          <h3>Macronutrient Breakdown:</h3>\n          <p>Daily Calories: {dailyCalories} calories</p>\n          <p>Protein: {proteinAmount} g</p>\n          <p>Carbohydrates: {carbAmount} g</p>\n          <p>Fat: {fatAmount} g</p>\n        </div>\n      )}\n      {Object.keys(mealPlan).length > 0 && (\n        <div className=\"mt-4\">\n          <h3>Meal Plan:</h3>\n          <Table striped bordered>\n            <thead>\n              <tr>\n                <th>Day</th>\n                <th>Breakfast</th>\n                <th>Lunch</th>\n                <th>Dinner</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(mealPlan).map((day) => (\n                <tr key={day}>\n                  <td>{day}</td>\n                  <td>\n                    {mealPlan[day].breakfast.name} -{' '}\n                    {`Protein: ${mealPlan[day].breakfast.protein}g, Carbs: ${mealPlan[day].breakfast.carbs}g, Fat: ${mealPlan[day].breakfast.fat}g`}\n                  </td>\n                  <td>\n                    {mealPlan[day].lunch.name} -{' '}\n                    {`Protein: ${mealPlan[day].lunch.protein}g, Carbs: ${mealPlan[day].lunch.carbs}g, Fat: ${mealPlan[day].lunch.fat}g`}\n                  </td>\n                  <td>\n                    {mealPlan[day].dinner.name} -{' '}\n                    {`Protein: ${mealPlan[day].dinner.protein}g, Carbs: ${mealPlan[day].dinner.carbs}g, Fat: ${mealPlan[day].dinner.fat}g`}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","/Users/jtsang01/Desktop/GainsSuggestor/src/reportWebVitals.js",[],[],{"ruleId":"23","severity":1,"message":"24","line":10,"column":19,"nodeType":"25","messageId":"26","endLine":10,"endColumn":29},{"ruleId":"23","severity":1,"message":"27","line":18,"column":24,"nodeType":"25","messageId":"26","endLine":18,"endColumn":39},{"ruleId":"23","severity":1,"message":"28","line":19,"column":21,"nodeType":"25","messageId":"26","endLine":19,"endColumn":33},{"ruleId":"23","severity":1,"message":"29","line":20,"column":20,"nodeType":"25","messageId":"26","endLine":20,"endColumn":31},{"ruleId":"23","severity":1,"message":"30","line":107,"column":13,"nodeType":"25","messageId":"26","endLine":107,"endColumn":16},"no-unused-vars","'setBodyFat' is assigned a value but never used.","Identifier","unusedVar","'setProteinRatio' is assigned a value but never used.","'setCarbRatio' is assigned a value but never used.","'setFatRatio' is assigned a value but never used.","'lbm' is assigned a value but never used."]